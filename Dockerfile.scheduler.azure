# Bot Scheduler - Azure Container Apps/Functions
# Lightweight API server for serverless deployment
#
# This is the SCHEDULER that triggers jobs, not the bot itself
# Bot image: meet-teams-bot
# Scheduler image: bot-scheduler

FROM node:20-alpine AS base

# Install Bun
RUN apk add --no-cache curl bash && \
    curl -fsSL https://bun.sh/install | bash

ENV PATH="/root/.bun/bin:${PATH}"

# Build stage
FROM base AS builder

WORKDIR /app

# Copy package files
COPY package.json bun.lock* package-lock.json* ./

# Install dependencies
RUN bun install --frozen-lockfile --production=false

# Copy source code
COPY . .

# Build TypeScript
RUN bun run build

# Production stage
FROM base AS production

WORKDIR /app

# Copy package files and install production dependencies only
COPY package.json bun.lock* package-lock.json* ./
RUN bun install --frozen-lockfile --production

# Copy built application from builder
COPY --from=builder /app/build ./build
COPY --from=builder /app/src/buildInfo.json ./src/buildInfo.json

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Change ownership
RUN chown -R nodejs:nodejs /app

USER nodejs

# Environment configuration for Azure
ENV NODE_ENV=production
ENV PORT=8080
ENV PLATFORM=azure
ENV SCHEDULER_MAX_CONCURRENT_JOBS=100
ENV SCHEDULER_CONTAINER_IMAGE=meet-teams-bot:latest

# Azure Container Apps uses PORT 8080 by default
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:8080/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Start scheduler server
CMD ["bun", "run", "build/src/scheduler-server.js"]
